import java.io.*;
import java.util.ArrayList;
import java.util.Collections;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.io.WritableComparable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;


/***
 * 	
 * 		2 Mappers and 2 Reducers are used in the programming with 2 Writables and 1 WritableComparable.
 * 
 *	Job 1:
 *		Input source mapper emits user as a key, pairs of movie and rating as a value(stored in FirstWritable).
 *
 *		The first Custom Writable is defined to store pairs of movie and rating. 
 *		Type of movie is Text and type of rating is IntWritable.
 *
 *		Aggregating reducer aggregates Iterable values of FirstWritable which have 
 *		the same key(user) and output data with more than 2 movies.
 *
 *	Job 2:
 *		Key/value swapping mapper makes movie pairs as a key, users and ratings they scored as a value. 
 *		Through the input text, movie pairs with a length of 2 are generated by 2 for loops.
 *
 *		The MoviePairsWritable is defined to store movie pairs. Movie1 and movie2 are all Text Type.
 *	
 *		The second Custom Writable is defined to store user and ratings. 
 *		Type of user, rating1, rating2 are Text, IntWritable and IntWritable, respectively.
 *
 *		The last reducer aggregates Iterable values of SecondWritable which have 
 *		the same key(movie pairs) and output result by using String.
 *
 ***/


public class AssigOnez5197332 {
	
	
	//To store a pair of movie and rating
	public static class FirstWritable implements Writable{
		private Text movie;
		private IntWritable rating;
		
		public FirstWritable() {
			this.movie = new Text("");
			this.rating = new IntWritable(-1);
		}

		/**
		 * @param movie
		 * @param rating
		 */
		public FirstWritable(Text movie, IntWritable rating) {
			super();
			this.movie = movie;
			this.rating = rating;
		}
		

		public Text getMovie() {
			return movie;
		}


		public void setMovie(Text movie) {
			this.movie = movie;
		}

		
		public IntWritable getRating() {
			return rating;
		}


		public void setRating(IntWritable rating) {
			this.rating = rating;
		}


		@Override
		public void readFields(DataInput data) throws IOException {
			// TODO Auto-generated method stub
			this.movie.readFields(data);
			this.rating.readFields(data);
		}
		@Override
		public void write(DataOutput data) throws IOException {
			// TODO Auto-generated method stub
			this.movie.write(data);
			this.rating.write(data);
		}
		
		@Override
		public String toString() {
			// TODO Auto-generated method stub
			return this.movie.toString()+ ","+ this.rating.toString() + " ";
		}		
	}
	
	
	//To generate movie pairs
	public static class MoviePairsWritable implements WritableComparable<MoviePairsWritable>{
		private Text movie1;
		private Text movie2;
		
		public MoviePairsWritable() {
			this.movie1 = new Text("");
			this.movie2 = new Text("");
		}
		
		/**
		 * @param movie1
		 * @param movie2
		 */
		public MoviePairsWritable(Text movie1, Text movie2) {
			super();
			this.movie1 = movie1;
			this.movie2 = movie2;
		}
		
		
		public Text getMovie1() {
			return movie1;
		}

		public void setMovie1(Text movie1) {
			this.movie1 = movie1;
		}

		public Text getMovie2() {
			return movie2;
		}

		public void setMovie2(Text movie2) {
			this.movie2 = movie2;
		}

		@Override
		public void readFields(DataInput data) throws IOException {
			// TODO Auto-generated method stub
			this.movie1.readFields(data);
			this.movie2.readFields(data);
		}
		@Override
		public void write(DataOutput data) throws IOException {
			// TODO Auto-generated method stub
			this.movie1.write(data);
			this.movie2.write(data);
		}

		@Override
		public String toString() {
			return "("+movie1.toString()+","+movie2.toString()+")";
		}

		@Override
		public int compareTo(MoviePairsWritable o) {
			// TODO Auto-generated method stub
			int cmp = this.movie1.compareTo(o.movie1);
			if (cmp!=0)
				return cmp;
			else  
				return this.movie2.compareTo(o.movie2);
		}
	}

	
	//To store a pair of user and ratings
	public static class SecondWritable implements Writable{
		private Text user;
		private IntWritable rating1;
		private IntWritable rating2;
		
		public SecondWritable() {
			this.user = new Text("");
			this.rating1 = new IntWritable(-1);
			this.rating2 = new IntWritable(-1);
		}

		public SecondWritable(Text movie, IntWritable rating) {
			super();
			this.user = movie;
			this.rating1 = rating;
			this.rating2 = rating;
		}

		public Text getUser() {
			return user;
		}

		public void setUser(Text user) {
			this.user = user;
		}

		public IntWritable getRating1() {
			return rating1;
		}

		public void setRating1(IntWritable rating1) {
			this.rating1 = rating1;
		}

		public IntWritable getRating2() {
			return rating2;
		}

		public void setRating2(IntWritable rating2) {
			this.rating2 = rating2;
		}

		@Override
		public void readFields(DataInput data) throws IOException {
			// TODO Auto-generated method stub
			this.user.readFields(data);
			this.rating1.readFields(data);
			this.rating2.readFields(data);
		}
		@Override
		public void write(DataOutput data) throws IOException {
			// TODO Auto-generated method stub
			this.user.write(data);
			this.rating1.write(data);	
			this.rating2.write(data);
		}
		
		@Override
		public String toString() {
			// TODO Auto-generated method stub
			return "("+user.toString()+","+rating1.toString()+","+rating2.toString()+")"+",";
		}		
	}
		
	
	public static class Mapper1 extends Mapper<LongWritable,Text,Text,FirstWritable>{
		@Override
		protected void map(LongWritable key, Text value, Mapper<LongWritable, Text, Text, FirstWritable>.Context context)
				throws IOException, InterruptedException {
			// TODO Auto-generated method stub
			String [] parts=value.toString().split("::");
			FirstWritable movie_rating_pairs = new FirstWritable();
			movie_rating_pairs.setMovie(new Text(parts[1]));
			movie_rating_pairs.setRating(new IntWritable(Integer.parseInt(parts[2])));
			context.write(new Text(parts[0]),movie_rating_pairs);
		}	
	}

	
	public static class Reducer1 extends Reducer<Text,FirstWritable,Text,Text>{

		@Override
		protected void reduce(Text user, Iterable<FirstWritable> values,Reducer<Text,FirstWritable,Text, Text>.Context context) throws IOException, InterruptedException {
			// TODO Auto-generated method stub

			String array =new String("");
			int count = 0; 
			for (FirstWritable a : values) {
				array+=a.toString();
				count=count+1;
			}
			// having  than 2 movies
			if (count>1) {
				context.write(user, new Text(array));
			}
		}
	}
	

	public static class Mapper2 extends Mapper<LongWritable,Text,MoviePairsWritable,SecondWritable>{
		@Override
		protected void map(LongWritable key, Text value, Mapper<LongWritable, Text, MoviePairsWritable, SecondWritable>.Context context)
				throws IOException, InterruptedException {
			// TODO Auto-generated method stub
			String [] parts=value.toString().split("\t");
			String [] pairs = parts[1].toString().split(" ");
			ArrayList<String> obj= new ArrayList<String>();
			for(String a:pairs) {
				obj.add(a);				
			}
			Collections.sort(obj);		
			
			for(int i=0;i<obj.size()-1;i++) {
				for(int j=i+1;j<obj.size();j++) {
					MoviePairsWritable movie_pairs = new MoviePairsWritable();
					movie_pairs.setMovie1(new Text(obj.get(i).toString().split(",")[0]));
					movie_pairs.setMovie2(new Text(obj.get(j).toString().split(",")[0]));		
					SecondWritable user_rating_pairs = new SecondWritable();
					user_rating_pairs.setUser(new Text(parts[0]));
					user_rating_pairs.setRating1(new IntWritable(Integer.parseInt(obj.get(i).toString().split(",")[1])));
					user_rating_pairs.setRating2(new IntWritable(Integer.parseInt(obj.get(j).toString().split(",")[1])));
					context.write(movie_pairs,user_rating_pairs);
				}
			}
		}	
	}
	
	
	public static class Reducer2 extends Reducer<MoviePairsWritable,SecondWritable,MoviePairsWritable,Text>{
		@Override
		protected void reduce(MoviePairsWritable key, Iterable<SecondWritable> values,
				Reducer<MoviePairsWritable, SecondWritable, MoviePairsWritable, Text>.Context context) throws IOException, InterruptedException {
			// TODO Auto-generated method stub
			String array =new String("");
			for(SecondWritable t :values){
				array+=t;
			}
			array = array.substring(0, array.length() - 1);
			context.write(key, new Text("["+array+"]"));
		}
	}

	//main function
	public static void main(String[] args) throws Exception{
		Configuration conf = new Configuration();
		Path out = new Path(args[1]);
		
		Job job1 = Job.getInstance(conf,"seperating");
		//set MAPPER class
		job1.setMapperClass(Mapper1.class);
		//set REDUCER class
		job1.setReducerClass(Reducer1.class);

		//set MAP output <key,value>
		job1.setMapOutputKeyClass(Text.class);
		job1.setMapOutputValueClass(FirstWritable.class);
		
		//set REDUCER output <key,value>
		job1.setOutputKeyClass(Text.class);
		job1.setOutputValueClass(Text.class);
		
		job1.setInputFormatClass(TextInputFormat.class);
		
		//pass the file in the main function,and generate output
		FileInputFormat.addInputPath(job1,new Path(args[0]));
		FileOutputFormat.setOutputPath(job1,new Path(out,"out1"));
		
		//submit job
		if(!job1.waitForCompletion(true)) {
			System.exit(1);
		}
		
		Job job2 = Job.getInstance(conf,"Reduce-side join");
		job2.setMapperClass(Mapper2.class);
		job2.setReducerClass(Reducer2.class);

		job2.setMapOutputKeyClass(MoviePairsWritable.class);
		job2.setMapOutputValueClass(SecondWritable.class);
		
		job2.setOutputKeyClass(MoviePairsWritable.class);
		job2.setOutputValueClass(Text.class);
		
		FileInputFormat.addInputPath(job2,new Path(out,"out1"));
		FileOutputFormat.setOutputPath(job2,new Path(out,"out2"));
	
		if(!job2.waitForCompletion(true)) {
			System.exit(1);
		}
	}
}


